#!/bin/bash

############################
red=$(tput setaf 1)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
gray=$(tput setaf 0)$(tput bold)
green=$(tput setaf 2)
bold=$(tput bold)
reset=$(tput sgr0)
yellow=$(tput setaf 3)
underline=$(tput smul)
manifests=()
colorize="yarp"
showUsage=
dryRun=
silent=

debug() {
	log "debug" "$@"
}

info() {
	log "info" "$@"
}

logPrompt() {
	log "prompt" "$@"
}

error() {
	log "error" "$@"
}

log() {
	if [ -n "${silent}" ]; then
		return;
	fi

	local type=$(basename $1)
	local args=
	shift

	case ${type} in
		info)
			echo -n "[${green}${type}${reset}]"
			;;
		error)
			echo -n "[${red}${type}${reset}]"
			;;
		prompt)
			echo -n "[${magenta}${type}${reset}]"
			args="-n"
			;;
		debug)
			echo -n "[${gray}${type}${reset}]"
			;;
		*)
			echo -n "[${yellow}${type}${reset}]"
			;;
	esac

	echo ${args} " $@"
}

checkError() {
	if [ $? -ne 0 ]; then
		errorExit "$1"
	fi
}

errorExitElapsed() {
	error $1
	showElapsed
	exit 1
}

errorExit() {
	error $1
	exit 1
}

showElapsed() {
	info "Finished in ${green}${SECONDS}${reset} seconds"
}

######################

usage() {
	cat <<EOF
${bold}colo${reset} - Stupidly simple configurator
  https://github.com/tmont/colo

${bold}colo${reset} is an extremely thin, simple, vaguely naive version of Puppet. Basically
it copies files around and restarts services as needed.

Its only argument is a path to a ${bold}manifest file${reset}, which enumerates which files
and services it should do stuff with.

Currently it has only been tested on Debian systems, but probably works on
any system with Bash.

${underline}USAGE${reset}
  $0 [options] file1 [file2...]

${underline}OPTIONS${reset}
${yellow}--dry-run${reset}      Print actions that will be taken, but don't actually do anything
${yellow}-C, --no-color${reset} Disable colorized output
${yellow}-s, --silent${reset}   Disable all output
EOF
}

checkBashVersion() {
	local yarp[0]="yarp" || (echo "Please upgrade bash to use this script" && exit 2)
}

parseArguments() {
	while [[ $# > 0 ]]; do
		local key="$1"
		shift

		case ${key} in
			-h|--help)
				showUsage="yarp"
				;;
			--dry-run)
				dryRun="yarp"
				shift
				;;
			-s|--silent)
				silent="yarp"
				;;
			-C|--no-color)
				colorize=
				;;
			*)
				manifests+=("$key")
				;;
		esac
	done
}

colorize() {
	local color=$1
	local message=$2
	echo "${color}${message}${reset}"
}

copy() {
	local source=$1
	local dest=$2

	info "Copying $(colorize ${yellow} "${source}") to $(colorize ${yellow} "${dest}")"
	cp -R "${source}" "${dest}" || (errorExit \
		"Failed to copy $(colorize ${yellow} "${source}") to $(colorize ${yellow} "${dest}")")
}
restartService() {
	local serviceName=$1
	local sleepTime=$2

	if [ -z "${sleepTime}" ]; then
		sleepTime=1
	fi

	if ! [[ "${sleepTime}" =~ ^[0-9]+$ ]]; then
		errorExit "sleepTime ($(colorize ${blue} ${sleepTime})) must be an integer"
	fi

	if [ -z "${serviceName}" ]; then
		errorExit "$(colorize ${magenta} restartService) expects a service name"
	fi

	if [ -n "$(which systemctl)" ]; then
		debug "Checking systemctl for ${serviceName}..."
		local loadState=$(systemctl show "${serviceName}" --property=LoadState | cut -d '=' -f 2)
		checkError "Failed to get LoadState from systemctl for ${serviceName}"
		if [ "${loadState}" = "loaded" ]; then
			info "Service ${serviceName} found in systemctl, restarting..."
			systemctl restart "${serviceName}" || errorAndExit "Failed to restart ${serviceName}"

			info "Waiting ${sleepTime} seconds before checking status..."
			sleep ${sleepTime}
			local status=$(systemctl show "${serviceName}" --property=ActiveState | cut -d '=' -f 2)
			if [ "${status}" != "active" ]; then
				errorExit "${serviceName} restarted, but is no longer running!"
			else
				info "${serviceName} is running!"
			fi
			return
		else
			info "Service ${serviceName} not found in systemctl (LoadState=$(colorize ${blue} ${loadState}))"
		fi
	else
		info "systemctl not in PATH"
	fi

    if [ -n "$(which service)" ]; then
		debug "Checking service for ${serviceName}..."
		local serviceStatus=$(service "${serviceName}" status)
		if [ "${serviceStatus}" != "${serviceName}: unrecognized service" ]; then
			info "Service ${serviceName} found in service, restarting..."
			service "${serviceName}" restart || "Failed to restart ${serviceName}"

			info "Waiting ${sleepTime} seconds before checking status..."
			sleep ${sleepTime}
			local status=$(service "${serviceName}" status | grep running)
			if [ -z "${status}" ]; then
				errorExit "${serviceName} restarted, but is no longer running!"
			else
				info "${serviceName} is running!"
			fi
			return
		fi
	else
		info "service not in PATH"
	fi

	errorAndExit "Both 'systemctl' and 'service' are either nonexistent or unaware of ${serviceName}"
}

run() {
	info "Running custom command: $(colorize ${yellow} "$*")"
	eval "$@"
}

parseArguments $@

if [ -z "${colorize}" ]; then
	red=
	blue=
	magenta=
	gray=
	green=
	bold=
	reset=
	yellow=
	underline=
fi

if [ -n "${showUsage}" ]; then
	usage
	exit 0
fi

if [ ${#manifests[@]} -eq 0 ]; then
	# read from stdin if no files specified
	manifests+=(/dev/stdin)
fi

for file in "${manifests[@]}"; do
	lineNo=0
	while read -r line; do
		lineNo=$((lineNo += 1))
		if [ -z "${line}" ]; then
			continue;
		fi

		# prevent basic accidental "abuse" by just checking that the first
		# word is one of the whitelisted commands

		firstWord=$(echo "${line}" | cut -d ' ' -f 1)
		rest=$(echo "${line}" | cut -d ' ' -f 1 --complement)
		case "${firstWord}" in
			run)
				# can't eval this if there are redirects and/or pipes
				# this is probably going to break in certain cases, but i can't find them
				${firstWord} "${rest}" || errorExitElapsed \
					"run failed on line $(colorize ${blue} ${lineNo}) in ${file}"
				;;
			restartService)
				eval "${line}" || errorExitElapsed \
					"restartService failed on line $(colorize ${blue} ${lineNo}) in ${file}"
				;;
			copy)
			    eval "${line}" || errorExitElapsed \
					"copy failed on line $(colorize ${blue} ${lineNo}) in ${file}"
				;;
			*)
				errorExitElapsed "Unknown command: ${firstWord} on line ${lineNo} of ${file}"
				;;
		esac
	done < "${file}" || errorExitElapsed "Error reading from ${file}"

done

info "All manifests processed!"
showElapsed
